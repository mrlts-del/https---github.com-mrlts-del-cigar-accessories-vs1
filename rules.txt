# Rules
You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

Objective: Create a fully functional Next.js website that adheres to best practices in performance, security, and maintainability. The website should utilize the latest stable versions of Next.js 14, Supabase, Tailwind CSS, and TypeScript.

Technical Preferences:
Use kebab-case for component names (e.g., my-component.tsx).
Favor React Server Components and Next.js SSR features.
Minimize the use of client components ('use client') to small, isolated components.
Implement loading and error states for data fetching components.
Use semantic HTML elements where possible.
Implement error handling and error logging.

General Preferences:
Follow user requirements carefully.
Ensure code is correct, up-to-date, bug-free, fully functional, secure, performant, and efficient.
Prioritize readability over performance.
Fully implement all requested functionality without placeholders.
Use descriptive file names and concise code.

Code Style and Structure:
Use concise, technical TypeScript code with functional and declarative programming patterns.
Favor iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
Structure files with exported components, subcomponents, helpers, static content, and types.
Use lowercase with dashes for directory names (e.g., components/auth-wizard).

Optimization and Best Practices:
Minimize the use of 'use client', useEffect, and setState; favor React Server Components and Next.js SSR features.
Implement dynamic imports for code splitting and optimization.
Use responsive design with a mobile-first approach.
Optimize images using WebP format, include size data, and implement lazy loading.

Error Handling and Validation:
Prioritize error handling and edge cases:
Use early returns for error conditions.
Implement guard clauses to handle preconditions and invalid states early.
Use custom error types for consistent error handling.

UI and Styling:
Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
Implement consistent design and responsive patterns across platforms.

State Management and Data Fetching:
Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
Implement validation using Zod for schema validation.

Security and Performance:
Implement proper error handling, user input validation, and secure coding practices.
Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

Testing and Documentation:
Write unit tests for components using Jest and React Testing Library.
Provide clear and concise comments for complex logic.
Use JSDoc comments for functions and components to improve IDE intellisense.

Methodology:
System 2 Thinking: Approach the problem with analytical rigor.
Tree of Thoughts: Evaluate multiple possible solutions and their consequences.
Iterative Refinement: Consider improvements, edge cases, and optimizations.

Process:
Deep Dive Analysis: Conduct a thorough analysis of the task.

Planning: Develop a clear plan outlining the architectural structure and flow.
Implementation: Implement the solution step-by-step.
Review and Optimize: Perform a review for potential optimizations.

Finalization: Finalize the code ensuring it meets all requirements.

Task: Please create a full Next.js website following the above guidelines and specifications. Ensure that all components, state management, data fetching, and styling adhere to the best practices outlined. Implement necessary testing and documentation for the project.

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

## Scratchpad

**Phase 1: Project Setup & Configuration**
- [ ] Initialize Next.js 15 project with TypeScript (`npx create-next-app@latest --ts`).
- [ ] Install Shadcn UI (`npx shadcn-ui@latest init`).
- [ ] Install Lucide React icons (`npm install lucide-react`).
- [ ] Install Prisma (`npm install prisma --save-dev`) and Prisma Client (`npm install @prisma/client`).
- [ ] Initialize Prisma with PostgreSQL provider (`npx prisma init --datasource-provider postgresql`).
- [ ] Configure database connection URL in `.env`.
- [ ] Install next-auth@beta (`npm install next-auth@beta`).
- [ ] Configure `next-auth` adapter for Prisma (`npm install @auth/prisma-adapter`).
- [ ] Install Stripe (`npm install stripe`).
- [ ] Install Uploadthing (`npm install uploadthing @uploadthing/react`).
- [ ] Configure Uploadthing API key and secret in `.env`.
- [ ] Install Resend (`npm install resend`).
- [ ] Configure Resend API key in `.env`.
- [ ] Install Zustand (`npm install zustand`).
- [ ] Install Zod (`npm install zod`).
- [ ] Install Recharts (`npm install recharts`).
- [ ] Configure ESLint, Prettier, and `tsconfig.json` based on project rules.

**Phase 2: Database Schema (Prisma)**
- [ ] Define User model (integrating with `next-auth`).
- [ ] Define Product, Category, Image models.
- [ ] Define Order, OrderItem, Address models.
- [ ] Define Cart, CartItem models (consider guest vs. user carts).
- [ ] Define Review model.
- [ ] Establish relationships (e.g., User-Orders, Product-Category, Order-OrderItems).
- [ ] Run `npx prisma db push` or `npx prisma migrate dev` to sync schema.
- [ ] Generate Prisma Client (`npx prisma generate`).

**Phase 3: Authentication (next-auth@beta, Prisma Adapter)**
- [ ] Set up `[...nextauth]/route.ts` handler.
- [ ] Configure Prisma adapter.
- [ ] Implement Email/Password provider.
- [ ] (Optional) Implement OAuth providers (e.g., Google, GitHub).
- [ ] Create Sign Up, Sign In, Sign Out functionality and pages/components.
- [ ] Implement session management and access control (middleware for protected routes).
- [ ] Implement role-based access (User, Admin) - add role to User model.
- [ ] Implement Password Reset flow using Resend.

**Phase 4: Core E-commerce Frontend (Next.js, Shadcn, Zustand)**
- [ ] **Layout:** Create main site layout (header, footer, navigation).
- [ ] **Product Listing:**
    - [ ] Fetch products (Server Component).
    - [ ] Implement pagination, sorting, filtering UI.
    - [ ] Implement search functionality.
    - [ ] Create `product-card` component.
- [ ] **Product Detail Page:**
    - [ ] Fetch single product data (Server Component).
    - [ ] Display product details, images (carousel?), price.
    - [ ] Display product reviews.
    - [ ] "Add to Cart" button.
- [ ] **Shopping Cart:**
    - [ ] Create cart state using Zustand.
    - [ ] Implement `add-to-cart`, `remove-from-cart`, `update-quantity` actions.
    - [ ] Create Cart page/drawer/modal to display items and total.
    - [ ] Persist cart (local storage for guests, DB via API/Server Action for users).
- [ ] **Checkout Process:**
    - [ ] Create multi-step checkout flow (Address -> Shipping -> Payment -> Review).
    - [ ] Address form and selection (link to User addresses).
    - [ ] Integrate Stripe Elements/Checkout for payment capture.
    - [ ] Server Action/API route to create Stripe Payment Intent.
    - [ ] Server Action/API route to create Order in DB after successful payment.
    - [ ] Stripe Webhook handler to confirm payment and update order status.
- [ ] **User Profile/Account:**
    - [ ] Page to view/edit profile details.
    - [ ] Page to manage addresses (CRUD).
    - [ ] Page to view order history.
- [ ] **Reviews:**
    - [ ] Form for submitting reviews (only for purchased products).
    - [ ] Server Action/API route to save reviews.
    - [ ] Display average rating and individual reviews on product page.

**Phase 5: Admin Dashboard Frontend (Next.js, Shadcn, Recharts)**
- [ ] Create separate layout for admin area (`/admin`).
- [ ] Protect admin routes using middleware (check for 'Admin' role).
- [ ] **Dashboard Overview:**
    - [ ] Fetch sales data, user counts, order counts.
    - [ ] Display key metrics using Shadcn cards.
    - [ ] Implement charts (e.g., sales over time) using Recharts.
- [ ] **Product Management:**
    - [ ] Data table (using `react-table` or Shadcn's table) to list products.
    - [ ] Forms (using `react-hook-form` + Zod) for creating/editing products.
    - [ ] Integrate Uploadthing for image uploads within the product form.
    - [ ] Implement delete functionality with confirmation.
- [ ] **Category Management:**
    - [ ] CRUD interface for product categories.
- [ ] **Order Management:**
    - [ ] Data table to list orders.
    - [ ] View order details (items, customer info, shipping address).
    - [ ] Functionality to update order status.
- [ ] **User Management:**
    - [ ] Data table to list users.
    - [ ] Functionality to view user details and manage roles.

**Phase 6: Backend Logic (Server Actions/API Routes, Prisma, Zod)**
- [ ] Implement Server Actions or API routes for all data fetching and mutations.
- [ ] Use Prisma Client for database interactions.
- [ ] Validate all inputs using Zod schemas within Server Actions/API routes.
- [ ] Implement robust error handling.
- [ ] Secure endpoints/actions, ensuring proper authorization checks.

**Phase 7: Styling, UI Refinements & Emails**
- [ ] Ensure consistent styling using Shadcn and Tailwind CSS.
- [ ] Implement responsive design for all pages and components.
- [ ] Add loading states (skeletons, spinners) for data fetching.
- [ ] Implement user feedback (toasts/notifications) for actions (e.g., item added to cart, order placed).
- [ ] Implement email templates (using React Email or similar) for Resend:
    - [ ] Order Confirmation.
    - [ ] Shipment Notification.
    - [ ] Password Reset.
    - [ ] Welcome Email.

**Phase 8: Testing**
- [ ] Write unit tests for utility functions, complex components, and potentially Server Actions.
- [ ] (Optional) Write integration tests for critical flows (auth, checkout).

**Phase 9: Deployment**
- [ ] Configure environment variables for production (database URL, API keys, `NEXTAUTH_SECRET`, etc.).
- [ ] Choose hosting platform (e.g., Vercel).
- [ ] Set up production database.
- [ ] Configure build and deployment settings.
- [ ] Set up Stripe webhooks in production.
- [ ] Set up Uploadthing and Resend for production domains.
