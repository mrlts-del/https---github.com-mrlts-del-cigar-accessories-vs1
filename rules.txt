# Rules
You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

Objective: Create a fully functional Next.js website that adheres to best practices in performance, security, and maintainability. The website should utilize the latest stable versions of Next.js 14, Supabase, Tailwind CSS, and TypeScript.

Technical Preferences:
Use kebab-case for component names (e.g., my-component.tsx).
Favor React Server Components and Next.js SSR features.
Minimize the use of client components ('use client') to small, isolated components.
Implement loading and error states for data fetching components.
Use semantic HTML elements where possible.
Implement error handling and error logging.

General Preferences:
Follow user requirements carefully.
Ensure code is correct, up-to-date, bug-free, fully functional, secure, performant, and efficient.
Prioritize readability over performance.
Fully implement all requested functionality without placeholders.
Use descriptive file names and concise code.

Code Style and Structure:
Use concise, technical TypeScript code with functional and declarative programming patterns.
Favor iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
Structure files with exported components, subcomponents, helpers, static content, and types.
Use lowercase with dashes for directory names (e.g., components/auth-wizard).

Optimization and Best Practices:
Minimize the use of 'use client', useEffect, and setState; favor React Server Components and Next.js SSR features.
Implement dynamic imports for code splitting and optimization.
Use responsive design with a mobile-first approach.
Optimize images using WebP format, include size data, and implement lazy loading.

Error Handling and Validation:
Prioritize error handling and edge cases:
Use early returns for error conditions.
Implement guard clauses to handle preconditions and invalid states early.
Use custom error types for consistent error handling.

UI and Styling:
Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
Implement consistent design and responsive patterns across platforms.

State Management and Data Fetching:
Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
Implement validation using Zod for schema validation.

Security and Performance:
Implement proper error handling, user input validation, and secure coding practices.
Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

Testing and Documentation:
Write unit tests for components using Jest and React Testing Library.
Provide clear and concise comments for complex logic.
Use JSDoc comments for functions and components to improve IDE intellisense.

Methodology:
System 2 Thinking: Approach the problem with analytical rigor.
Tree of Thoughts: Evaluate multiple possible solutions and their consequences.
Iterative Refinement: Consider improvements, edge cases, and optimizations.

Process:
Deep Dive Analysis: Conduct a thorough analysis of the task.

Planning: Develop a clear plan outlining the architectural structure and flow.
Implementation: Implement the solution step-by-step.
Review and Optimize: Perform a review for potential optimizations.

Finalization: Finalize the code ensuring it meets all requirements.

Task: Please create a full Next.js website following the above guidelines and specifications. Ensure that all components, state management, data fetching, and styling adhere to the best practices outlined. Implement necessary testing and documentation for the project.

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons
- Remember to install dependencies like `use-debounce` when using them.
- Restarting the TypeScript server (Cmd/Ctrl+Shift+P -> `TypeScript: Restart TS server`) can resolve type errors after `prisma generate` or when new files/imports aren't recognized immediately.
- Defining React components within Server Action files (`'use server'`) is incorrect and causes errors. Components should be in separate files.
- When using Resend's `react` property, explicitly use `React.createElement(Component, props)` instead of `<Component {...props} />` within server actions to avoid potential type issues.
- Be careful with type assertions (`as`, `!`). Ensure the underlying logic guarantees the type, especially when dealing with environment variables or potentially null/undefined values. Use explicit checks where possible.
- When using `replace_in_file` with multiple blocks or on files that might have changed slightly (e.g., due to formatting), it can fail. Using `write_to_file` with the full intended content is a reliable fallback.
- Ensure `defaultValues` in `react-hook-form` match the expected types, handling `null` from Prisma by providing a default like `''`.

## Scratchpad

**Phase 1: Project Setup & Configuration**
- [X] Initialize Next.js 15 project with TypeScript (`npx create-next-app@latest --ts`). (Verified existing project)
- [X] Install Shadcn UI (`npx shadcn@latest init`).
- [X] Install Lucide React icons (`npm install lucide-react`).
- [X] Install Prisma (`npm install prisma --save-dev`) and Prisma Client (`npm install @prisma/client`).
- [X] Initialize Prisma with PostgreSQL provider (`npx prisma init --datasource-provider postgresql`).
- [X] Configure database connection URL in `.env`.
- [X] Install next-auth@beta (`npm install next-auth@beta`).
- [X] Configure `next-auth` adapter for Prisma (`npm install @auth/prisma-adapter`).
- [X] Install Stripe (`npm install stripe`).
- [X] Install Uploadthing (`npm install uploadthing @uploadthing/react`).
- [X] Configure Uploadthing API key and secret in `.env`.
- [X] Install Resend (`npm install resend`).
- [X] Configure Resend API key in `.env`.
- [X] Install Zustand (`npm install zustand`).
- [X] Install Zod (`npm install zod`).
- [X] Install Recharts (`npm install recharts`).
- [X] Configure ESLint, Prettier, and `tsconfig.json` based on project rules. (Basic setup done)

**Phase 2: Database Schema (Prisma)**
- [X] Define User model (integrating with `next-auth`).
- [X] Define Product, Category, Image models.
- [X] Define Order, OrderItem, Address models.
- [X] Define Cart, CartItem models (consider guest vs. user carts).
- [X] Define Review model.
- [X] Define PasswordResetToken model.
- [X] Establish relationships (e.g., User-Orders, Product-Category, Order-OrderItems).
- [X] Run `npx prisma db push` or `npx prisma migrate dev` to sync schema.
- [X] Generate Prisma Client (`npx prisma generate`). (Ran multiple times)

**Phase 3: Authentication (next-auth@beta, Prisma Adapter)**
- [X] Set up `[...nextauth]/route.ts` handler. (Includes adapter config)
- [X] Implement Email/Password provider.
- [X] (Optional) Implement OAuth providers (e.g., Google, GitHub).
- [X] Create Sign Up, Sign In, Sign Out functionality and pages/components.
- [X] Implement session management and access control (middleware for protected routes).
- [X] Implement role-based access (User, Admin) - add role to User model. (Role added to model & used in middleware)
- [X] Implement Password Reset flow using Resend. (Actions & Forms created, email sending setup)

**Phase 4: Core E-commerce Frontend (Next.js, Shadcn, Zustand)**
- [X] **Layout:** Create main site layout (header, footer, navigation).
- [X] **Product Listing:**
    - [X] Fetch products (Server Component).
    - [X] Implement pagination, sorting, filtering UI. (Added controls and updated fetch logic)
    - [X] Implement search functionality. (Added input and updated fetch logic)
    - [X] Create `product-card` component.
- [X] **Product Detail Page:**
    - [X] Fetch single product data (Server Component).
    - [X] Display product details, images (carousel?), price.
    - [X] Display product reviews. (ReviewList component created & added)
    - [X] "Add to Cart" button.
- [X] **Shopping Cart:**
    - [X] Create cart state using Zustand.
    - [X] Implement `add-to-cart`, `remove-from-cart`, `update-quantity` actions.
    - [X] Create Cart page/drawer/modal to display items and total. (CartSheet created)
    - [X] Persist cart (local storage for guests, DB via API/Server Action for users). (localStorage setup done)
- [X] **Checkout Process:**
    - [X] Create multi-step checkout flow (Address -> Shipping -> Payment -> Review). (Implemented steps & basic state management)
    - [X] Address form and selection (link to User addresses). (Created component & fetch/add actions)
    - [X] Integrate Stripe Elements/Checkout for payment capture. (Created components & setup)
    - [X] Server Action/API route to create Stripe Payment Intent. (Created action)
    - [X] Server Action/API route to create Order in DB after successful payment. (Created action, includes email sending)
    - [X] Stripe Webhook handler to confirm payment and update order status. (Created API route)
- [X] **User Profile/Account:**
    - [X] Page to view/edit profile details. (Created page & form, update action implemented)
    - [X] Page to manage addresses (CRUD). (Created page, form, dialog & CRUD actions)
    - [X] Page to view order history. (Created page & fetch action)
- [X] **Reviews:**
    - [X] Form for submitting reviews (only for purchased products). (Created form & submit action)
    - [X] Server Action/API route to save reviews. (Created submit action)
    - [X] Display average rating and individual reviews on product page. (Created ReviewList component)

**Phase 5: Admin Dashboard Frontend (Next.js, Shadcn, Recharts)**
- [X] Create separate layout for admin area (`/admin`).
- [X] Protect admin routes using middleware (check for 'Admin' role).
- [X] **Dashboard Overview:**
    - [X] Fetch sales data, user counts, order counts. (Implemented fetch & display)
    - [X] Display key metrics using Shadcn cards. (Implemented with data)
    - [X] Implement charts (e.g., sales over time) using Recharts. (Implemented sales chart & recent orders list)
- [X] **Product Management:**
    - [X] Data table (using `react-table` or Shadcn's table) to list products. (Implemented table display)
    - [X] Forms (using `react-hook-form` + Zod) for creating/editing products. (Created form component & pages, fetched categories)
    - [X] Integrate Uploadthing for image uploads within the product form. (Setup Uploadthing & integrated into form)
    - [X] Implement delete functionality with confirmation. (Added action & dialog trigger)
- [X] **Category Management:**
    - [X] CRUD interface for product categories. (Created page, form, dialog & CRUD actions)
- [X] **Order Management:**
    - [X] Data table to list orders. (Implemented table display)
    - [X] View order details (items, customer info, shipping address). (Created detail page & fetch action)
    - [X] Functionality to update order status. (Implemented action & UI trigger)
- [X] **User Management:**
    - [X] Data table to list users. (Implemented table display)
    - [X] Functionality to view user details and manage roles. (Implemented role update action & UI trigger, delete action & UI trigger)

**Phase 6: Backend Logic (Server Actions/API Routes, Prisma, Zod)**
- [X] Implement Server Actions or API routes for all data fetching and mutations. (Created initial actions for auth, user, product, category, order, checkout, admin)
- [X] Use Prisma Client for database interactions. (Used in actions)
- [X] Validate all inputs using Zod schemas within Server Actions/API routes. (Added Zod schemas in actions)
- [X] Implement robust error handling. (Added basic try/catch and error returns)
- [X] Secure endpoints/actions, ensuring proper authorization checks. (Added admin checks in relevant actions)

**Phase 7: Styling, UI Refinements & Emails**
- [X] Ensure consistent styling using Shadcn and Tailwind CSS. (Foundation laid)
- [X] Implement responsive design for all pages and components. (Basic responsiveness inherited from Shadcn)
- [X] Add loading states (skeletons, spinners) for data fetching. (Added in various places)
- [X] Implement user feedback (toasts/notifications) for actions (e.g., item added to cart, order placed). (Used Sonner toast)
- [X] Implement email templates (using React Email or similar) for Resend:
    - [X] Order Confirmation. (Implemented basic template & sending)
    - [X] Shipment Notification. (Implemented basic template & sending logic)
    - [X] Password Reset. (Implemented basic template & sending)
    - [X] Welcome Email. (Implemented basic template & sending logic)

**Phase 8: Testing**
- [ ] Write unit tests for utility functions, complex components, and potentially Server Actions.
- [ ] (Optional) Write integration tests for critical flows (auth, checkout).

**Phase 9: Deployment**
- [X] Configure environment variables for production (database URL, API keys, `NEXTAUTH_SECRET`, etc.). (Instructions provided, added AUTH_SECRET placeholder, checked .gitignore)
- [X] Choose hosting platform (e.g., Vercel). (Assumed Vercel based on feedback)
- [X] Set up production database. (Instructions provided, schema sync required)
- [X] Configure build and deployment settings. (Standard Next.js build assumed, Prisma generate added)
- [X] Set up Stripe webhooks in production. (Instructions provided)
- [X] Set up Uploadthing and Resend for production domains. (Instructions provided)
