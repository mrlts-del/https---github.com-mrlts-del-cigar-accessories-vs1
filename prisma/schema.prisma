// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "multiSchema"] // Add multiSchema
  // engineType      = "library" // Remove this line for now
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // schemas   = ["public"] // Remove this for now
  // directUrl = env("DIRECT_URL") // Comment out unless specifically needed (e.g., Neon)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Add if using Credentials provider
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?     @db.Text
  price       Float // Store price in cents/smallest currency unit if preferred (Int)
  stock       Int         @default(0)
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([slug])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([productId])
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String?
  zip       String
  country   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Order {
  id                    String      @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  addressId             String
  address               Address     @relation(fields: [addressId], references: [id])
  total                 Float // Store price in cents/smallest currency unit if preferred (Int)
  status                OrderStatus @default(PENDING)
  stripePaymentIntentId String?     @unique // Optional if payment fails initially
  items                 OrderItem[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([stripePaymentIntentId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id]) // Consider onDelete: SetNull or Restrict if products shouldn't be deleted if ordered
  quantity  Int
  price     Float // Price at the time of purchase
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

// Cart tied directly to User
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique // Each user has one cart
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Cascade delete if product removed
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([cartId, productId]) // Ensure only one cart item per product in a cart
  @@index([cartId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // e.g., 1-5
  comment   String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Allow only one review per user per product
  @@index([userId])
  @@index([productId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token]) // A user might request multiple tokens, but each token is unique
  @@index([email])
}
